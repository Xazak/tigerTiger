# implicit variables
# these are usually defined in the user environment already;
# 	if they need to be overridden, this is the place to do so
#	Common makefile implicits:
#	VAR		DEFAULT		NOTES
#	======= =========== ==========
#	CC		cc			C compiler
#	CXX		g++			C++ compiler
#	CPP		$(CC) -E	C preprocessor, to stdout
#	CFLAGS				C compiler flags
#	CXXFLAGS			C++ compiler flags
#	CPPFLAGS			C preproc. flags
#	LDFLAGS				Linker flags (usu. 'ld')
#	LDLIBS				Linker libraries

# automatic variables
# these are not defined by the user; they are automatic substitutions
#	VAR		NOTES
#	=======	======
#	$@		The filename of the rule's target (everything before the :)
#	$<		The name of the first prerequisite
#	$^		The names of all prerequisites
#	$?		The names of all prerequisites newer than the target

# common flags for C++
# -m32		Compile for x86 environment (as opposed to x64)
# -std=		Compile for specified C++ standard
# -Wall		Display all warnings
# -g		Activate debugging symbols for use in GDB

#g++ src/*.cpp -o tuto -Iinclude -L. -ltcod -ltcodxx -Wl,-rpath=. -Wall
#
CXXFLAGS=-Wall -g -Iinclude
LDFLAGS=-ltcod -ltcodgui

# custom variables
# note that variables can be recursively defined by using $(foo) in the def:
# 	ALPHA = foo
#	BETA  = $(ALPHA)

NAME=app
OBJDIR=obj
SRCDIR=src

# rules
all:		$(SRCDIR)/*.cpp
	$(CXX) $(CXXFLAGS) $< -o $(NAME) 

# misc

# the .PHONY rule specifies a 'fake' target, ie for tasks other than compiles,
# 	or for situations where there is no actual file to connect to the rule
# any phony rule should continue despite errors, such as with rm
.PHONY: clean

# this rule should NEVER be first, or else make will invoke it by default!
clean:		#cleans up the working dir
	rm -f $(OBJDIR)/*.o
